{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","name","onChange","target","value","type","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAkBlD,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,MAMhB,SACE,uBACEO,KAAK,aACLC,SAlBoB,SAACN,GACzBF,EAAcE,EAAEO,OAAOC,QAkBnBC,KAAK,OACLD,MAAQX,O,+BC1BHa,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAWH,GAD7C,+DAEEI,MAAOF,GAFT,cAEfG,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAadM,GAbc,4CAAH,sDCCPO,EAAc,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACxC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCFOO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EAEhBf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAmB1C,OAZAC,qBAAU,WAERxB,EAASC,GACNwB,MAAM,SAAAC,GACHH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAIhB,CAACpB,IAEGqB,EDf0BK,CAAc1B,GAAlCa,EAH4B,EAGjCN,KAAaa,EAHoB,EAGpBA,QAGrB,OACE,qCACE,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SACMH,EAAOJ,KAAK,SAAAC,GAAG,OACf,cAAC,EAAD,eAEOA,GADAA,EAAIC,aEgBRgB,EA/BM,SAAAC,GAAS,MAGQ3C,mBAAS,CAAC,cAHlB,mBAGrBQ,EAHqB,KAGTT,EAHS,KAY5B,OACE,qCACE,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEIS,EAAWgB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADJA,Y,MCpBpB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4e76c6c7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const CategoryAdd = ( { setCategories } ) => {\n  \n  const [inputValue, setInputValue] = useState('');\n  \n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if ( inputValue.trim().length > 2 ) {\n      setCategories( categories => [ inputValue, ...categories ]);\n      setInputValue('');\n    }\n\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input\n        name=\"inputValue\"\n        onChange={ handleInputChange }\n        type=\"text\"\n        value={ inputValue }\n      />\n    </form>\n  )\n}\n\nCategoryAdd.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=AtzAETrFWpkbPYez6PHBDhNRCcJCEenT`;\n  const response = await fetch( url );\n  const { data } = await response.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url} ) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url } alt={ title } />\n      <p> { title } </p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n  // const [images, setImages] = useState([]);\n  const { data:images, loading } = useFetchGifs( category );\n\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n\n      { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n      <div className=\"card-grid\">\n          { images.map( img => (\n            <GifGridItem\n              key={img.id}\n              { ...img }\n            />))\n          }\n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n\n    getGifs( category )\n      .then( imgs => {\n          setState({\n            data: imgs,\n            loading: false\n          });\n      })\n\n  }, [category])\n\n  return state; // { data:[], loading: true };\n}","import React, { useState } from 'react'\n\nimport { CategoryAdd } from './components/CategoryAdd';\nimport { GifGrid } from './components/GifGrid';\nconst GifExpertApp = props => {\n\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleAdd = () => {\n  //   //setCategories([...categories, 'Tom y Jerry']);\n  //   setCategories( cats => [ ...cats, 'Tom y Jerry' ]);\n  // }\n\n\n\n  return (\n    <>\n      <h2>GirfExpertApp</h2>\n      <CategoryAdd setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid\n              key={ category }\n              category={category} />\n          ))\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}